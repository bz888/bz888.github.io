--___-skin: black;
background var(--___, black);

attribute tag <id="__" >
#___{ }

inline style e.g. <h1 style="color: green;">

override with !important

.___{
    background: var(--class);
    height: 
    width:
}

:root

@keyframes wave{
    10% {
        transform: rotate(110deg);
      }
      20% {
        transform: rotate(130deg);
      }
      30% {
        transform: rotate(110deg);
      }
      40% {
        transform: rotate(130deg);
      }
}

text box submissions
<button type="submit">this button submits the form</button>

text-box input
 <input type="text" placeholder="cat photo URL">

radio box
 <label for="indoor"><input id="indoor" type="radio" name="indoor-outdoor" value="indoor"> Indoor</label>

checkbox
type="checkbox"

import google font
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">

try: <strong> tag, underline tag <u>, <hr>, rgba(45, 45, 45, 0.1), box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
opacity:

e.g. <p> students at <strong>Stanford </strong> University.

#navbar {
position: fixed;
top: 0px;
left: 0px;

<nav id="navbar">
      <ul>
        <li><a href="">Home</a></li>
        <li><a href="">Contact</a></li>
      </ul>
    </nav>

    #left {
float: left;

      width: 50%;
    }
    #right {
float: right;
      width: 40%;
    }

z-index
over lapping

you can directly create shapes in css, as long as you reference it to a attribute, e.g. <div class="square"></div>

Hsl(s and l stand for saturation and lightness), rgba, rgb, color
Gradient:
linear-Gradient(gradient_direction, color 1, color 2, color 3, ...);
repeating-linear-gradient(
      45deg,
      yellow 0px,
      yellow 40px,
      black 40px,
      black 80px
    );

:hover{
  transform: scale(1.3);
}
when hovering the size of the attribute increases by value

pseduo-elements, ::before ::after

animation:
  #rect {
animation-name: rainbow;
animation-duration: 4s;

  }
@keyframes rainbow{
  0%{
    background-color: blue;
  }
  50%{
    background-color: green;
  }
  100%{
    background-color: yellow;
  }
}

animation on hover
  button:hover {
    animation-name: background-color;
    animation-duration: 500ms;
    /* Only change code below this line */
animation-fill-mode: forwards;
    /* Only change code above this line */
  }
  @keyframes background-color {
    100% {
      background-color: #4791d0;
    }
  }

  animation-iteration-count: infinite;

  
Try 
<article></article> 

<header></header> 

<footer></footer> 

<figure>
  <ficaption>
  </figcaption>
</figure>

<fieldset></fieldset> can act as a box

tag instead of <div></div> for text sections

Audio e.g.
<audio id="meowClip" controls>
  <source src="audio/meow.mp3" type="audio/mpeg">
  <source src="audio/meow.ogg" type="audio/ogg">
</audio>

Colorblind audience
 4.5:1 contrast ratio by changing the lightness vales

 Accesskey
 <a id="second" href="#" accesskey="c"> by just adding accesskey="" within an anchor 
tabindex
 <div tabindex="0">I need keyboard focus!</div>

 {
   flex-direction: row-reverse;
 }

 !important to know,
flex-start: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.
flex-end: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.
space-between: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.
space-around: similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container.
space-evenly: Distributes space evenly between the flex items with a full space at either end of the flex container

flex-wrap
nowrap: this is the default setting, and does not wrap items.
wrap: wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if they are in columns.
wrap-reverse: wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.

flex-shrink and flex-grow
If wanting different sizes for indivudal boxes for a box container in proption to one another depending on the set value

order: set value

display: grid
grid-template-columns: (number of columns that I want e.g. 100px 100px would equate to having two 100px columns)
same applies for rows, grid-column-gap, can just use grid-gap 
<look into column lines and row-lines> when using grid-column

justify impacts the item's horizotnal positioning | align-self impacts the vertical
  -justify-self is for the one object
  -for a container you can use justify-items

grid-template-areas:
      "header header header"
      "advert content content"
      "footer footer footer";
  custom area, by referencing name e.g.
  grid-area: header;
  To use grid-area without creating an areas template
  grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;
  grid-template-columns: 100px minmax(50px, 200px);

